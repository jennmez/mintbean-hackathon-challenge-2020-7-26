{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  // import { getQuestions } from './api';\n  // import { userAnswers } from './stores';\n  let questions = [];\n  let userAnswers = [];\n\n  const proxyURL = 'https://cors-anywhere.herokuapp.com/';\n  const api = {\n    key: process.env.QUIZ_API_KEY,\n    baseURL: 'https://quizapi.io/api/v1/',\n  };\n\n  onMount(async function loadQuestions() {\n    try {\n      let response = await fetch(\n        `${proxyURL}${api.baseURL}questions?apiKey=${api.key}&category=code&difficulty=Medium&limit=5&tags=HTML`\n      );\n      questions = await response.json();\n      console.log(questions);\n    } catch (err) {\n      alert(err);\n    }\n  });\n\n  const handleClick = ({ userAnswer }) => {\n    console.log(userAnswer);\n    userAnswers = [...userAnswers, userAnswer];\n  };\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n  div {\n    padding: 1em;\n  }\n\n  .answers {\n    display: flex;\n    flex-direction: column;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 3em;\n    font-weight: 200;\n  }\n  h6 {\n    color: #292929;\n    font-size: 2em;\n    font-weight: 200;\n  }\n  p {\n    color: #292929;\n    font-size: 1.5em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>HTML Interview Questions</h1>\n  <h6>\n    Just started learning HTML? Test your knowledge by answering these 5 common\n    interview questions!\n  </h6>\n  {#each questions as question}\n    <div>\n      <p>{question.question}</p>\n      <div class=\"answers\">\n        <button on:click={() => handleClick(question.answers.answer_a)}>\n          {question.answers.answer_a}\n        </button>\n        <button on:click={() => handleClick(question.answers.answer_b)}>\n          {question.answers.answer_b}\n        </button>\n        <button on:click={() => handleClick(question.answers.answer_c)}>\n          {question.answers.answer_c}\n        </button>\n        <button on:click={() => handleClick(question.answers.answer_d)}>\n          {question.answers.answer_d}\n        </button>\n      </div>\n    </div>\n  {:else}\n    <!-- this block renders when .length === 0 -->\n    <p>loading...</p>\n  {/each}\n</main>\n"
  ],
  "names": [],
  "mappings": "AAgCE,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,GAAG,AACd,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC"
}